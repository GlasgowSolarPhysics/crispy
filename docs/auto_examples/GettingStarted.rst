
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/GettingStarted.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_GettingStarted.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_GettingStarted.py:


.. _quick-start:

Quick Start Guide to crispy
===========================

.. GENERATED FROM PYTHON SOURCE LINES 9-12

The following is a quick guide on how to get started with crispy. This will
cover the basic data wrapper and its constituent properties. For a more
in-depth look at the other data wrappers please refer to :ref:`data-wrap-ex`.

.. GENERATED FROM PYTHON SOURCE LINES 14-22

The first thing to do is to import the default data wrapper ``CRISP``. This is
the base used for alll of the data objects in the package. ``CRISP`` assumes
that your observations are either imaging spectroscopic or imaging
spectropolarimetric (although it'll give its best at any 3D or 4D data) and is
given either as a `FITS file
<https://fits.gsfc.nasa.gov/fits_standard.html>`_, a `zarr file
<https://zarr.readthedocs.io/en/stable/>`_ or an object dictionary (see
:ref:`utils`).

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default


    from crispy import CRISP
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 27-29

The only argument we need now to create our data object is the path to the
file:

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default


    c_ex = CRISP("example_data/2014/crisp_l2_20140906_152724_6563_r00447.fits")


.. GENERATED FROM PYTHON SOURCE LINES 33-36

Our example object ``c_ex`` is now a ``CRISP`` object containing this
observation. We can get details of the following observation doing the
following

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default


    print(c_ex)


.. GENERATED FROM PYTHON SOURCE LINES 40-45

All data objects in crispy can be indexed in a similar manner to `numpy arrays
<https://numpy.org/doc/stable/reference/arrays.indexing.html>`_. For example,
our data above is sampled at 15 different wavelengths, say we only wanted to
work with the imaging data from the fourth wavelength then we could create a
new object as such:

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: default


    c_sub = c_ex[3] # remember Python indexing starts at 0!


.. GENERATED FROM PYTHON SOURCE LINES 49-53

And this ``c_sub`` object will contain the data for only the fourth wavelength
in our original data. This kind of slicing is useful as the whole object is
sliced rather than just the ``.data`` property allowing us to keep everything
together.

.. GENERATED FROM PYTHON SOURCE LINES 55-57

This is also how the plotting methods work, they expect a slice of the object
otherwise an error will be thrown. For example,

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default


    c_sub.intensity_map()
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_GettingStarted.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: GettingStarted.py <GettingStarted.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: GettingStarted.ipynb <GettingStarted.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
